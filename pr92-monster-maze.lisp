(defparameter *filename* "data-sets/pr92-monster-maze.dat")

(defun file-get-maze-lists (filename)
  (with-open-file (input-stream filename :if-does-not-exist nil)
    (when input-stream
      (read input-stream nil)
      (loop for row-count = (read input-stream nil)
            for col-count = (read input-stream nil)
            while (and row-count col-count)
            collect (loop repeat row-count
                          collect (coerce (read-line input-stream nil)
                                          'list))))))

(defun maze-list->maze-matrix (maze-list)
  (make-array `(,(length maze-list)
                ,(length (car maze-list)))
              :initial-contents maze-list))

(defun exit-found-p (maze-matrix &optional row col already-passed)
  (unless (position-if (lambda (rc)
                     (and (= row (car rc))
                          (= col (cdr rc))))
                   already-passed)
    (let ((elm (aref maze-matrix row col))
          (max-row (1- (array-dimension maze-matrix 0)))
          (max-col (1- (array-dimension maze-matrix 1)))
          (new-passed (cons (cons row col) already-passed)))
      (case elm
        (#\E t)
        (#\. (or (if (>= col max-col) nil (exit-found-p maze-matrix row (1+ col) new-passed))
                 (if (<= col 0)       nil (exit-found-p maze-matrix row (1- col) new-passed))
                 (if (>= row max-row) nil (exit-found-p maze-matrix (1+ row) col new-passed))
                 (if (<= row 0)       nil (exit-found-p maze-matrix (1- row) col new-passed))))
        (otherwise nil)))))
    

(defun sanitize-maze-matrix (maze-matrix)
  (destructuring-bind (rows cols) (array-dimensions maze-matrix)
    (dotimes (row rows)
      (dotimes (col cols)
        (when (char= (aref maze-matrix row col) #\M)
          (setf (aref maze-matrix row col) #\X)
          (when (< col (1- cols)) (setf (aref maze-matrix row (1+ col)) #\X))
          (when (> col 0)         (setf (aref maze-matrix row (1- col)) #\X))
          (when (< row (1- rows)) (setf (aref maze-matrix (1+ row) col) #\X))
          (when (> row 0)         (setf (aref maze-matrix (1- row) col) #\X))))))
  maze-matrix)

(defun pr92-monster-maze-main ()
  (dolist (maze-list (file-get-maze-lists *filename*))
    (let* ((maze-matrix (maze-list->maze-matrix maze-list))
           (sanitized-maze-matrix (sanitize-maze-matrix maze-matrix))
           (start-col (position #\S (car maze-list))))
      (setf (aref sanitized-maze-matrix 0 start-col) #\.)
      (if (exit-found-p sanitized-maze-matrix 0 start-col)
          (format t "EXIT FOUND!")
          (format t "NO EXIT FOUND!"))
      (terpri))))
      
